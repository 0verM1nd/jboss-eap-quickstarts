<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
   <parent>
      <artifactId>jboss-as-kitchensink-html5-mobile</artifactId>
      <groupId>org.jboss.as.quickstarts</groupId>
      <version>7.0.2-SNAPSHOT</version>
   </parent>

    <groupId>org.jboss.as.quickstarts</groupId>
    <artifactId>jboss-as-kitchensink-html5-mobile-client</artifactId>
    <version>7.0.2-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>JBoss AS Quickstarts: AeroGear HTML5/Mobile Client</name>
    <description>An AeroGear and Java EE 6 HTML5 mobile web application for use with JBoss, generated from the
        jboss-html5-mobile-archetype
    </description>

    <url>http://jboss.org/aerogear</url>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <distribution>repo</distribution>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        </license>
    </licenses>

    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following
       message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
  resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <!-- Maven will append the version to the finalName (which is the name
given to the generated war, and hence the context root) -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <configuration>
                    <!-- Java EE 6 doesn't require web.xml, Maven needs to catch
                   up! -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
            <!-- To use, run: mvn package jboss-as:deploy -->
            <plugin>
                <groupId>org.jboss.as.plugins</groupId>
                <artifactId>jboss-as-maven-plugin</artifactId>
                <version>7.1.0.CR1</version>
            </plugin>

            <plugin>
                <groupId>com.mycila.maven-license-plugin</groupId>
                <artifactId>maven-license-plugin</artifactId>
                <version>1.9.0</version>
                <configuration>
                    <header>../src/etc/license.txt</header>
                    <includes>
                        <include>src/**</include>
                    </includes>
                    <excludes>
                        <exclude>src/main/webapp/js/libs/**</exclude>
                        <exclude>src/main/webapp/css/jquery.mobile-1.0.min.css</exclude>
                        <exclude>src/test/qunit/qunit/**</exclude>
                    </excludes>
                    <mapping>
                        <tmpl>XML_STYLE</tmpl>
                    </mapping>
                    <strictCheck>true</strictCheck>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- The default profile skips all tests, though you can tune it
  to run just unit tests based on a custom pattern -->
            <!-- Seperate profiles are provided for running all tests, including
    Arquillian tests that execute in the specified container -->
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.4.3</version>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- When built in OpenShift the 'openshift' profile will be used when invoking mvn. -->
            <!-- Use this profile for any OpenShift specific customization your app will need. -->
            <!-- By default that is to put the resulting archive into the 'deployments' folder. -->
            <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
            <id>openshift</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>2.1.1</version>
                        <configuration>
                            <outputDirectory>deployments</outputDirectory>
                            <warName>ROOT</warName>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
